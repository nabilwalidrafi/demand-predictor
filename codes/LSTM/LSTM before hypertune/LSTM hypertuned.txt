import streamlit as st
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout, BatchNormalization
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

# === Title and Description ===
st.title("Monthly Demand Prediction for 2025")
st.write("Optimized LSTM model for predicting the monthly electricity demand in 2025.")

# === Define the data ===
data = {
    'Year': [2022]*12 + [2023]*12 + [2024]*12,
    'Month': list(range(1, 13)) * 3,
    'Demand': [
        595, 699, 1110, 1090, 1110, 1143, 1081, 1131, 1108, 1082, 958, 779,
        735, 852, 970, 1291, 1280, 1283, 1308, 1293, 1284, 1284, 1028, 846,
        748, 860, 1210, 1519, 1405, 1399, 1276, 1248, 1406, 1265, 1165, 893,
    ]
}
df = pd.DataFrame(data)

# === Sidebar for user selection ===
month_names = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
]
selected_month = st.selectbox("Select a month to predict", month_names)
month_index = month_names.index(selected_month) + 1

# === Train a linear regression model for the selected month ===
month_data = df[df['Month'] == month_index]
X = month_data['Year'].values.reshape(-1, 1)
y = month_data['Demand'].values

from sklearn.linear_model import LinearRegression
lin_model = LinearRegression()
lin_model.fit(X, y)
predicted_demand_lin = lin_model.predict([[2025]])[0]

# === Data Normalization ===
scaler = MinMaxScaler()
y_scaled = scaler.fit_transform(y.reshape(-1, 1))

# === LSTM Model Training ===
X_train = np.array(X).reshape(-1, 1, 1)
y_train = np.array(y_scaled).reshape(-1, 1)

lstm_model = Sequential([
    LSTM(64, activation='relu', return_sequences=True, input_shape=(1, 1)),
    Dropout(0.2),
    LSTM(64, activation='relu'),
    BatchNormalization(),
    Dense(32, activation='relu'),
    Dropout(0.2),
    Dense(1)
])

lstm_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.005), loss='mse')

# Callbacks for early stopping and learning rate adjustment
callbacks = [
    EarlyStopping(monitor='loss', patience=20, restore_best_weights=True),
    ReduceLROnPlateau(monitor='loss', factor=0.5, patience=10)
]

lstm_model.fit(X_train, y_train, epochs=300, batch_size=4, verbose=0, callbacks=callbacks)

# Predict and inverse transform the value
predicted_demand_lstm_scaled = lstm_model.predict(np.array([[[2025]]]))[0][0]
predicted_demand_lstm = scaler.inverse_transform([[predicted_demand_lstm_scaled]])[0][0]

# === Real values for 2025 ===
real_values_2025 = [
    748, 860, 1210, 1519, 1405, 1399, 1276, 1248, 1406, 1265, 1165, 893
]

# === Display predictions ===
st.success(f"Linear Regression Prediction for {selected_month} 2025: **{predicted_demand_lin:.2f} MW**")
st.success(f"Optimized LSTM Prediction for {selected_month} 2025: **{predicted_demand_lstm:.2f} MW**")
st.success(f"Actual Demand for {selected_month} 2025: **{real_values_2025[month_index - 1]} MW**")

# === Visualization for selected month ===
fig, ax = plt.subplots(figsize=(8, 4))
ax.plot(X, y, marker='o', color='blue', linestyle='--', label=f"{selected_month} Demand")
ax.scatter(2025, predicted_demand_lin, color='red', s=100, label='Linear Prediction (2025)')
ax.scatter(2025, predicted_demand_lstm, color='purple', s=100, marker='s', label='Optimized LSTM Prediction (2025)')
ax.scatter(2025, real_values_2025[month_index - 1], color='green', marker='x', s=100, label='Real Value (2025)')
ax.set_xlabel("Year")
ax.set_ylabel("Maximum Demand (MW)")
ax.legend()
ax.grid(True)
st.pyplot(fig)
