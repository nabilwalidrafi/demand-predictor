import streamlit as st
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, GRU, Dense, Dropout, Bidirectional
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

# === Title and Description ===
st.title("Monthly Demand Prediction for 2025")
st.write("Optimized LSTM model for electricity demand prediction.")

# === Define the data ===
data = {
    'Year': [2022]*12 + [2023]*12 + [2024]*12,
    'Month': list(range(1, 13)) * 3,
    'Demand': [
        595, 699, 1110, 1090, 1110, 1143, 1081, 1131, 1108, 1082, 958, 779,
        735, 852, 970, 1291, 1280, 1283, 1308, 1293, 1284, 1284, 1028, 846,
        748, 860, 1210, 1519, 1405, 1399, 1276, 1248, 1406, 1265, 1165, 893,
    ]
}
df = pd.DataFrame(data)

# === Normalization ===
scaler = MinMaxScaler()
df['Demand_Scaled'] = scaler.fit_transform(df[['Demand']])

# === Sidebar for user selection ===
month_names = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
]
selected_month = st.selectbox("Select a month to predict", month_names)
month_index = month_names.index(selected_month) + 1

# === Train an optimized LSTM model ===
month_data = df[df['Month'] == month_index]
X_train = np.array(month_data['Year']).reshape(-1, 1, 1)
y_train = np.array(month_data['Demand_Scaled'])

lstm_model = Sequential([
    Bidirectional(LSTM(100, activation='tanh', return_sequences=True, input_shape=(1, 1))),
    Dropout(0.2),
    LSTM(100, activation='tanh'),
    Dropout(0.2),
    Dense(1)
])

lstm_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), loss='mse')
lstm_model.fit(X_train, y_train, epochs=300, verbose=0)

# === Prediction ===
predicted_scaled_lstm = lstm_model.predict(np.array([[[2025]]]))[0][0]
predicted_demand_lstm = scaler.inverse_transform([[predicted_scaled_lstm]])[0][0]

# === Display predictions ===
st.success(f"LSTM Prediction for {selected_month} 2025: **{predicted_demand_lstm:.2f} MW**")

# === Full-year comparison graph ===
predicted_full_year_lstm = []

for month in range(1, 13):
    month_data = df[df['Month'] == month]
    X_train_month = np.array(month_data['Year']).reshape(-1, 1, 1)
    y_train_month = np.array(month_data['Demand_Scaled'])
    
    lstm_model_month = Sequential([
        Bidirectional(LSTM(100, activation='tanh', return_sequences=True, input_shape=(1, 1))),
        Dropout(0.2),
        LSTM(100, activation='tanh'),
        Dropout(0.2),
        Dense(1)
    ])
    
    lstm_model_month.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), loss='mse')
    lstm_model_month.fit(X_train_month, y_train_month, epochs=300, verbose=0)
    
    predicted_scaled = lstm_model_month.predict(np.array([[[2025]]]))[0][0]
    predicted_full_year_lstm.append(scaler.inverse_transform([[predicted_scaled]])[0][0])

# === Plotting the results ===
real_values_2025 = [748, 860, 1210, 1519, 1405, 1399, 1276, 1248, 1406, 1265, 1165, 893]
fig2, ax2 = plt.subplots(figsize=(10, 5))
ax2.plot(range(1, 13), predicted_full_year_lstm, color='purple', marker='s', linestyle='-', linewidth=2, label='Optimized LSTM Prediction 2025')
ax2.plot(range(1, 13), real_values_2025, color='green', marker='x', linestyle='-', linewidth=2, label='Real 2025')
ax2.set_xticks(range(1, 13))
ax2.set_xticklabels(month_names, rotation=45)
ax2.set_xlabel("Month")
ax2.set_ylabel("Maximum Demand (MW)")
ax2.legend()
ax2.grid(True)
st.pyplot(fig2)
